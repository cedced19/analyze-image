<!DOCTYPE html>
<html>
  <head>
    <title>Analyze Image | <%=translation.HOME_PAGE %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <meta name="viewport" raw="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <h1>Analyze Image</h1>
    <p><%=translation.WELCOME_MSG %> Analyze Image.<br><%=translation.ADVICE %></p>
    <form id="image-form">
          <label for="file"><%=translation.IMAGE %>: <span id="image-selected" style="display: none"><%=translation.IMAGE_SELECTED %></span></label>
          <label class="btn btn-file">
           <%=translation.SELECT_A_IMAGE %> <input type="file" id="file-input" accept="image/*">
         </label>
    </form>
    <div class="buttons">
      <a class="btn" id="computer-vision" style="display: none;"><%=translation.ANALYZE_COMPUTER_VISION %></a>
      <br>
      <a class="btn" id="face" style="display: none;"><%=translation.ANALYZE_FACE %></a>
      <br>
      <a class="btn" id="new-session"><%=translation.NEW_SESSION %></a>
    </div>
    <div id="canvas"></div>
    <pre id="interpreted"></pre>
    <pre id="raw"></pre>
    <script type="text/javascript">
        var id = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
        var parsingErrorBox = document.getElementById('parsing-error');
        var raw = document.getElementById('raw');
        var interpreted = document.getElementById('interpreted');

        document.getElementById('file-input').addEventListener('change', function (e) {
             document.getElementById('image-selected').style.display = 'inline-block';
             var xhr = new XMLHttpRequest();
             xhr.open('POST', '/api/images');
             xhr.addEventListener('load', function() {
               document.getElementById('computer-vision').style.display = 'block';
               document.getElementById('image-form').style.display = 'none';
             });
             var form = new FormData();
             form.append('id', id);
             form.append('type', 'raw');
             form.append('file', e.target.files[0]);
             xhr.send(form);
         });

         function syntaxHighlight(json) {
              json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
              return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
                  var cls = 'number';
                  if (/^"/.test(match)) {
                      if (/:$/.test(match)) {
                          cls = 'key';
                      } else {
                          cls = 'string';
                      }
                  } else if (/true|false/.test(match)) {
                      cls = 'boolean';
                  } else if (/null/.test(match)) {
                      cls = 'null';
                  }
                  return '<span class="' + cls + '">' + match + '</span>';
              });
         }

         function drawRectangles (data) {
           var container = document.getElementById('canvas');
           while (container.firstChild) {
             container.removeChild(container.firstChild);
           }
           container.appendChild(document.createElement('canvas'));
           var canvas = container.firstChild;
           canvas.width = data.body.metadata.width;
           canvas.height = data.body.metadata.height;
           var ctx = canvas.getContext('2d');
           ctx.clearRect(0, 0, canvas.width, canvas.height);
           var imageObj = new Image();

          imageObj.onload = function() {
              ctx.drawImage(imageObj, 0,0);

              data.body.faces.forEach(function (item) {
                ctx.beginPath();
                ctx.lineWidth='6';
                ctx.strokeStyle='red';
                ctx.strokeRect(item.faceRectangle.left,item.faceRectangle.top,item.faceRectangle.width,item.faceRectangle.height);
              });


          }
          imageObj.src = '/api/images/'+ id;
         }

         function analyzeData (data) {
           var canvas = document.getElementById('canvas').firstChild;
           var ctx = canvas.getContext('2d');
           var text = '';

           function addWord () {
             text += [].slice.apply(arguments).join(' ') + ' ';
           };

           function addLine () {
             text += [].slice.apply(arguments).join(' ') + '\n';
           };

           function addEmptyLine () {
             text += '\n';
           };

           function yesOrNo (aspect) {
             if (aspect) {
               addLine('<%=translation.YES %>');
             } else {
               addLine('<%=translation.NO %>');
             }
             addEmptyLine();
           };

           data.body.forEach(function (item, key) {
             ctx.beginPath();
             ctx.lineWidth='6';
             ctx.strokeStyle='blue';
             ctx.strokeRect(item.faceRectangle.left,item.faceRectangle.top,item.faceRectangle.width,item.faceRectangle.height);
             for(var propertyName in item.faceLandmarks) {
               ctx.beginPath();
               ctx.lineWidth='5';
               ctx.strokeStyle='green';
               ctx.strokeRect(Math.round(item.faceLandmarks[propertyName].x),Math.round(item.faceLandmarks[propertyName].y),1,1);

             }
             ctx.beginPath();
             ctx.font="40px Georgia";
             ctx.fillStyle = "#ff0000";
             ctx.fillText(key+1 + ')',item.faceRectangle.left-30,item.faceRectangle.top-30);

             addLine('<b><%=translation.PERSON %>', key+1, '</b>');

             /* Smile */
             addWord('<%=translation.SMILE %>:');
             yesOrNo(item.faceAttributes.smile);

             /* Age */
             addLine('<%=translation.AGE %>:', item.faceAttributes.age)
             addEmptyLine();

             /* Gender */
             addWord('<%=translation.GENDER %>:');
             if (item.faceAttributes.gender == 'male') {
               addLine('<%=translation.MALE %>');
             } else {
               addLine('<%=translation.FEMALE %>');
             }
             addEmptyLine();


             /* Facial Hair */
             addLine('<%=translation.FACIALHAIR %>:');
             addLine('<%=translation.MOUSTACHE %>:', item.faceAttributes.facialHair.moustache);
             addLine('<%=translation.BEARD %>:', item.faceAttributes.facialHair.beard);
             addLine('<%=translation.SIDEBURNS %>:', item.faceAttributes.facialHair.sideburns);
             addEmptyLine();

             /* Glasses */
             addWord('<%=translation.GLASSES %>:');
             if (item.faceAttributes.glasses == 'NoGlasses') {
               addLine('<%=translation.NO_GLASSES %>');
             }
             if (item.faceAttributes.glasses == 'ReadingGlasses') {
               addLine('<%=translation.READING_GLASSES %>');
             }
             if (item.faceAttributes.glasses == 'Sunglasses') {
               addLine('<%=translation.SUNGLASSES %>');
             }
             addEmptyLine();


             /* Emotions */
             var translationEmotions = {
               anger: '<%=translation.ANGER %>',
               contempt: '<%=translation.CONTEMPT %>',
               disgust: '<%=translation.DISGUST %>',
               fear: '<%=translation.FEAR %>',
               happiness: '<%=translation.HAPPINESS %>',
               neutral: '<%=translation.NEUTRAL %>',
               sadness: '<%=translation.SADNESS %>',
               surprise: '<%=translation.SURPRISE %>'
             }
             addWord('<%=translation.EMOTIONS %>:');
             for (var k in item.faceAttributes.emotion) {
                if (item.faceAttributes.emotion[k] > 0) {
                  addLine(translationEmotions[k]);
                }
             }
             addEmptyLine();

             /* Eye Makeup */
             addWord('<%=translation.EYE_MAKEUP %>:');
             yesOrNo(item.faceAttributes.eyeMakeup);

             /* Lip Makeup */
             addWord('<%=translation.LIP_MAKEUP %>:');
             yesOrNo(item.faceAttributes.lipMakeup);

             /* Bald */
             addWord('<%=translation.BALD %>:');
             if (item.faceAttributes.hair.bald > 0.9) {
               addLine('<%=translation.YES %>');
             } else {
               addLine('<%=translation.NO %>');
             }
             addEmptyLine();

             /* Hair Color */
             var translationColors = {
               brown: '<%=translation.BROWN %>',
               black: '<%=translation.BLACK %>',
               blond: '<%=translation.BLOND %>',
               gray: '<%=translation.GRAY %>',
               red: '<%=translation.RED %>',
               other: '<%=translation.OTHER %>'
             }
             if (item.faceAttributes.hair.hairColor.length !== 0) {
               addLine('<%=translation.HAIR_COLOR %>:', translationColors[item.faceAttributes.hair.hairColor[1].color]);
               addLine('<%=translation.CONFIDENCE %>:', item.faceAttributes.hair.hairColor[1].confidence);
               addEmptyLine();
             }

           });
           interpreted.innerHTML = text;
         }

         document.getElementById('computer-vision').onclick = function () {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', '/api/ms/computer-vision/' + id);
                xhr.addEventListener('load', function () {
                  var data = JSON.parse(xhr.response)
                  raw.innerHTML = syntaxHighlight(JSON.stringify(data, undefined, 4));
                  drawRectangles(data);
                  document.getElementById('face').style.display = 'block';
                  document.getElementById('computer-vision').style.display = 'none';
                });
                xhr.send();
         };

         document.getElementById('face').onclick = function () {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', '/api/ms/face/' + id);
                xhr.addEventListener('load', function () {
                  var data = JSON.parse(xhr.response);
                  raw.innerHTML = syntaxHighlight(JSON.stringify(data, undefined, 4));
                  analyzeData(data);
                  document.getElementById('face').style.display = 'none';
                });
                xhr.send();
         };

         document.getElementById('new-session').onclick = function () {
           document.location.href='/';
         };
    </script>
  </body>
</html>
